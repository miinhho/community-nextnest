/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 목록 조회
         * @description 페이지네이션으로 게시글 목록을 조회합니다.
         */
        get: operations["PostController_findPosts"];
        put?: never;
        /**
         * 게시글 생성
         * @description 새 게시글을 생성합니다.
         */
        post: operations["PostController_createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/post/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 상세 조회
         * @description ID로 특정 게시글을 조회합니다.
         */
        get: operations["PostController_findPostById"];
        /**
         * 게시글 수정
         * @description 게시글의 내용을 수정합니다.
         */
        put: operations["PostController_updatePost"];
        post?: never;
        /**
         * 게시글 삭제
         * @description 게시글을 삭제합니다.
         */
        delete: operations["PostController_deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/post/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 좋아요 토글
         * @description 게시글에 좋아요를 추가하거나 취소합니다.
         */
        post: operations["PostController_toggleLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 게시글 목록 조회
         * @description 특정 사용자의 게시글 목록을 페이지네이션으로 조회합니다.
         */
        get: operations["PostController_getUserPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/privacy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 공개 여부 조회
         * @description 사용자의 공개 여부를 조회합니다.
         */
        get: operations["PrivateController_getUserIsPrivate"];
        put?: never;
        /**
         * 사용자 공개 여부 수정
         * @description 사용자의 공개 여부를 수정합니다.
         */
        post: operations["PrivateController_updateUserPrivacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 사용자 차단
         * @description 특정 사용자를 차단합니다. 차단된 사용자는 차단한 사용자로부터의 모든 상호작용이 제한됩니다.
         */
        post: operations["BlockController_blockUser"];
        /**
         * 사용자 차단 해제
         * @description 차단된 사용자의 차단을 해제합니다.
         */
        delete: operations["BlockController_unblockUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 현재 사용자 정보 조회
         * @description 현재 로그인한 사용자의 정보를 조회합니다.
         */
        get: operations["UserController_getMyInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 조회
         * @description ID로 특정 사용자의 정보를 조회합니다. 비공개 사용자의 경우, 요청자가 팔로우한 사용자만 조회할 수 있습니다.
         */
        get: operations["UserController_getUserById"];
        put?: never;
        post?: never;
        /**
         * 사용자 삭제
         * @description ID로 특정 사용자를 삭제합니다. 본인과 관리자만 삭제할 수 있습니다.
         */
        delete: operations["UserController_deleteUser"];
        options?: never;
        head?: never;
        /**
         * 사용자 정보 수정
         * @description 사용자의 프로필 정보를 수정합니다. 본인과 관리자만 수정할 수 있습니다.
         */
        patch: operations["UserController_updateUser"];
        trace?: never;
    };
    "/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 댓글 수정
         * @description 기존 댓글의 내용을 수정합니다.
         */
        put: operations["CommentController_updateComment"];
        /**
         * 댓글 생성
         * @description 게시글에 새로운 댓글을 작성합니다.
         */
        post: operations["CommentController_createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 댓글 조회
         * @description ID로 특정 댓글의 상세 정보를 조회합니다. 차단된 사용자의 댓글은 제외됩니다.
         */
        get: operations["CommentController_getCommentById"];
        put?: never;
        post?: never;
        /** 댓글 삭제 */
        delete: operations["CommentController_deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{id}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 댓글 답글 목록 조회
         * @description 특정 댓글의 답글 목록을 페이지네이션으로 조회합니다. 차단된 사용자의 댓글은 제외됩니다.
         */
        get: operations["CommentController_getCommentReplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 댓글 좋아요 토글
         * @description 댓글의 좋아요 상태를 토글합니다.
         */
        post: operations["CommentController_toggleCommentLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 답글 생성
         * @description 댓글에 답글을 작성합니다.
         */
        post: operations["CommentController_createCommentReply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/post/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 댓글 목록 조회
         * @description 특정 게시글의 댓글 목록을 페이지네이션으로 조회합니다. 차단된 사용자의 댓글은 제외됩니다.
         */
        get: operations["CommentController_getCommentsByPostId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 댓글 목록 조회
         * @description 특정 사용자가 작성한 댓글 목록을 페이지네이션으로 조회합니다. 차단된 사용자의 댓글은 제외됩니다.
         */
        get: operations["CommentController_getCommentsByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 팔로우 토글
         * @description 사용자의 팔로우 상태를 토글합니다.
         */
        post: operations["FollowController_toggleFollowUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/follow/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 팔로우 요청
         * @description 사용자에게 팔로우 요청을 보냅니다.
         */
        post: operations["FollowController_sendFollowRequest"];
        /**
         * 팔로우 요청 거절
         * @description 사용자의 팔로우 요청을 거절합니다.
         */
        delete: operations["FollowController_rejectFollowRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/following-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로잉 수 조회
         * @description 특정 사용자가 팔로우하는 사용자 수를 조회합니다.
         */
        get: operations["FollowController_getUserFollowingCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/followers-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로워 수 조회
         * @description 특정 사용자의 팔로워 수를 조회합니다.
         */
        get: operations["FollowController_getUserFollowersCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로워 목록 조회
         * @description 특정 사용자의 팔로워 목록을 페이지네이션으로 조회합니다.
         */
        get: operations["FollowController_getUserFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로잉 목록 조회
         * @description 특정 사용자가 팔로우하는 사용자 목록을 페이지네이션으로 조회합니다.
         */
        get: operations["FollowController_getUserFollowing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입
         * @description 새로운 사용자 계정을 생성합니다.
         */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인
         * @description 이메일과 비밀번호로 로그인합니다.
         */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 애플리케이션 상태 확인
         * @description 애플리케이션과 데이터베이스의 상태를 확인합니다.
         */
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/user/read-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 사용자 알람 전체 읽음 처리
         * @description 특정 사용자의 모든 알람을 읽음 처리합니다.
         */
        patch: operations["NotifyController_readAllNotifiesByUserId"];
        trace?: never;
    };
    "/notify/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 알람 목록 조회
         * @description 특정 사용자의 알람 목록을 조회합니다.
         */
        get: operations["NotifyController_getNotifiesByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 알람 상세 조회
         * @description 특정 알람의 상세 정보를 조회합니다.
         */
        get: operations["NotifyController_getNotifyById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 알람 읽음 처리
         * @description 특정 알람을 읽음 처리합니다.
         */
        patch: operations["NotifyController_readNotifyById"];
        trace?: never;
    };
    "/notify/sse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 알림 SSE 스트림
         * @description 사용자의 알림을 SSE로 스트리밍합니다. 클라이언트는 이 엔드포인트를 통해 실시간으로 알림을 받을 수 있습니다.
         */
        get: operations["NotifySseController_stream"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PostContentDto: {
            /** @description 댓글 내용 */
            content: string;
        };
        CreatePostResponseDto: {
            /** @description 생성한 게시물의 ID (UUID) */
            postId: string;
            /** @description 글쓴이의 ID (UUID) */
            authorId: string;
        };
        PageMetaResponseDto: {
            /** @description 현재 페이지 */
            page: number;
            /** @description 페이지당 항목 수 */
            size: number;
        };
        FindPostsResponseDto: {
            /** @description 게시글 목록 */
            posts: unknown[][];
            /** @description 페이지네이션 정보 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        UserPrivateResponseDto: {
            /** @description 유저 이름 */
            name: string;
            /** @description 유저 ID (UUID) */
            id: string;
            /** @description 유저 프로필 이미지 URL */
            image: string | null;
            /** @description 유저 비공개 여부 */
            isPrivate: boolean;
        };
        FindPostByIdResponseDto: {
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 수정일
             */
            updatedAt: string;
            /** @description 게시글 ID (UUID) */
            id: string;
            /** @description 게시글 내용 */
            content: string;
            /** @description 게시글 좋아요 수 */
            likeCount: number;
            /** @description 댓글 수 */
            commentCount: number;
            /** @description 게시글 작성자 정보 */
            author: components["schemas"]["UserPrivateResponseDto"];
        };
        UpdatePostResponseDto: {
            /** @description 수정된 게시물의 ID (UUID) */
            id: string;
            /** @description 수정된 게시물 글쓴이의 ID (UUID) */
            authorId: string;
        };
        DeletePostResponseDto: {
            /** @description 삭제된 게시물의 ID (UUID) */
            id: string;
            /** @description 삭제된 게시물 글쓴이의 ID (UUID) */
            authorId: string;
            /** @description 삭제된 게시물의 내용 */
            content: string;
        };
        ToggleLikeResponseDto: {
            /** @description 게시물 ID (UUID) */
            id: string;
            /**
             * @description 게시물 좋아요 상태
             * @enum {string}
             */
            status: "PLUS" | "MINUS";
        };
        GetUserPostsResponseDto: {
            /** @description 사용자 게시글 목록 */
            posts: unknown[][];
            /** @description 페이지네이션 정보 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        UpdatePrivateBodyDto: {
            /** @description 사용자의 공개 여부 (true: 비공개, false: 공개) */
            isPrivate: boolean;
        };
        GetPrivateResponseDto: {
            /** @description 사용자의 공개 여부 (true: 비공개, false: 공개) */
            isPrivate: boolean;
        };
        BlockUserDto: {
            /** @description 차단할 사용자 ID */
            targetId: string;
        };
        UnBlockUserDto: {
            /** @description 차단 해제할 사용자 ID */
            targetId: string;
        };
        GetMyInfoResponseDto: {
            /** @description 유저 이름 */
            name: string;
            /** @description 유저 ID (UUID) */
            id: string;
            /** @description 유저 프로필 이미지 URL */
            image: string | null;
            /** @description 유저 이메일 */
            email: string;
            /** @description 이메일 인증 날짜 */
            emailVerified: Record<string, never> | null;
            /** @description 팔로잉 수 */
            followingCount: number;
            /** @description 팔로워 수 */
            followerCount: number;
            /** @description 게시글 수 */
            postCount: number;
            /**
             * @description 유저 역할
             * @enum {string}
             */
            role: "ADMIN" | "USER";
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 수정일
             */
            updatedAt: string;
        };
        GetUserByIdResponseDto: {
            /** @description 유저 이름 */
            name: string;
            /** @description 유저 ID (UUID) */
            id: string;
            /** @description 유저 프로필 이미지 URL */
            image: string | null;
            /** @description 유저 이메일 */
            email: string;
            /** @description 이메일 인증 날짜 */
            emailVerified: Record<string, never> | null;
            /** @description 팔로잉 수 */
            followingCount: number;
            /** @description 팔로워 수 */
            followerCount: number;
            /** @description 게시글 수 */
            postCount: number;
            /**
             * @description 유저 역할
             * @enum {string}
             */
            role: "ADMIN" | "USER";
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 수정일
             */
            updatedAt: string;
        };
        UpdateUserDto: {
            /** @description 사용자 이름 */
            name?: string;
            /**
             * Format: uri
             * @description 사용자 이미지 URL
             */
            image?: string | null;
        };
        DeleteUserResponseDto: {
            /** @description 유저 이름 */
            name: string;
            /** @description 유저 ID (UUID) */
            id: string;
            /** @description 유저 프로필 이미지 URL */
            image: string | null;
            /** @description 삭제된 사용자 이메일 */
            email: string;
        };
        CreateCommentDto: {
            /** @description 댓글이 달릴 게시글의 ID */
            postId: string;
            /** @description 댓글 내용 */
            content: string;
        };
        CreateCommentResponseDto: {
            /** @description 생성된 댓글의 ID (UUID) */
            commentId: string;
            /** @description 댓글이 달린 게시글의 ID (UUID) */
            postId: string;
            /** @description 댓글 작성자의 ID (UUID) */
            authorId: string;
        };
        UpdateCommentDto: {
            /** @description 수정할 댓글의 ID (UUID) */
            commentId: string;
            /** @description 댓글 내용 */
            content: string;
        };
        UserResponseDto: {
            /** @description 유저 이름 */
            name: string;
            /** @description 유저 ID (UUID) */
            id: string;
            /** @description 유저 프로필 이미지 URL */
            image: string | null;
        };
        CommentWithAuthorDto: {
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 수정일
             */
            updatedAt: string;
            /** @description 댓글 ID (UUID) */
            id: string;
            /** @description 댓글 내용 */
            content: string;
            /** @description 댓글 좋아요 수 */
            likesCount: number;
            /** @description 댓글 작성자 정보 */
            author: components["schemas"]["UserResponseDto"];
        };
        GetCommentResponseDto: {
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 수정일
             */
            updatedAt: string;
            /** @description 댓글 ID (UUID) */
            id: string;
            /** @description 댓글 내용 */
            content: string;
            /** @description 댓글 좋아요 수 */
            likesCount: number;
            /** @description 댓글 작성자 정보 */
            author: components["schemas"]["UserResponseDto"];
            /** @description 게시글 ID (UUID) */
            postId: string;
            /** @description 부모 댓글 정보 (대댓글인 경우에만 존재) */
            parent: components["schemas"]["CommentWithAuthorDto"] | null;
        };
        DeleteCommentResponseDto: {
            /** @description 삭제된 댓글의 내용 */
            content: string;
            /** @description 댓글이 달린 게시글의 ID (UUID) */
            postId: string;
            /** @description 댓글 작성자의 ID (UUID) */
            authorId: string;
        };
        GetRepliesResponseDto: {
            /** @description 댓글 답글 목록 */
            replies: unknown[][];
            /** @description 페이지네이션 정보 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        ToggleCommentLikeResponseDto: {
            /**
             * @description 댓글 좋아요 상태
             * @enum {string}
             */
            status: "PLUS" | "MINUS";
            /** @description 좋아요/싫어요를 토글한 댓글의 ID */
            commentId: string;
        };
        CreateReplyDto: {
            /** @description 답글이 달릴 게시글의 ID */
            postId: string;
            /** @description 답글이 달릴 댓글의 ID */
            commentId: string;
            /** @description 댓글 내용 */
            content: string;
        };
        CreateReplyResponseDto: {
            /** @description 생성된 답글의 ID (UUID) */
            replyId: string;
            /** @description 답글이 달린 게시글의 ID (UUID) */
            postId: string;
            /** @description 답글 작성자의 ID (UUID) */
            authorId: string;
        };
        GetCommentsByPostIdResponseDto: {
            /** @description 게시물 ID (UUID) */
            postId: string;
            /** @description 댓글 목록 */
            comments: unknown[][];
            /** @description 페이지네이션 정보 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        GetCommentsByUserIdResponseDto: {
            /** @description 댓글 목록 */
            comments: unknown[][];
            /** @description 페이지네이션 정보 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        ToggleFollowResponseDto: {
            /** @description 팔로우 대상 사용자 ID */
            targetId: string;
            /**
             * @description 팔로우 상태
             * @enum {string}
             */
            status: "FOLLOW" | "UNFOLLOW";
        };
        GetFollowingCountResponseDto: {
            /** @description 팔로잉 수 */
            followingCount: number;
        };
        GetFollowersCountResponseDto: {
            /** @description 팔로워 수 */
            followersCount: number;
        };
        GetFollowersResponseDto: {
            /** @description 팔로워 목록 */
            followers: unknown[][];
            /** @description 페이지네이션 메타데이터 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        GetFollowingResponseDto: {
            /** @description 팔로잉 목록 */
            following: unknown[][];
            /** @description 페이지네이션 메타데이터 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        RegisterUserDto: {
            /** @description 사용자 이메일 */
            email: string;
            /** @description 사용자 비밀번호 */
            password: string;
            /** @description 사용자 이름 */
            name: string;
        };
        RegisterResponseDto: {
            /** @description 유저 ID (UUID) */
            id: string;
            /**
             * @description 유저 역할
             * @enum {string}
             */
            role: "ADMIN" | "USER";
        };
        LoginUserDto: {
            /** @description 사용자 이메일 */
            email: string;
            /** @description 사용자 비밀번호 */
            password: string;
        };
        LoginResponseDto: {
            /** @description 유저 ID (UUID) */
            id: string;
            /**
             * @description 유저 역할
             * @enum {string}
             */
            role: "ADMIN" | "USER";
        };
        GetNotifiesByUserIdResponseDto: {
            /** @description 알람 목록 */
            notifies: unknown[][];
            /** @description 페이지네이션 메타데이터 */
            meta: components["schemas"]["PageMetaResponseDto"];
        };
        GetNotifyByIdResponseDto: {
            /** @description 알람 ID */
            id: string;
            /**
             * @description 알람 타입
             * @enum {string}
             */
            type: "COMMENT_LIKE" | "COMMENT_REPLY" | "FOLLOW" | "MESSAGE" | "POST_COMMENT" | "POST_LIKE" | "SYSTEM";
            /** @description 알람 이미지 */
            image: Record<string, never> | null;
            /** @description 알람 제목 */
            title: string;
            /** @description 알람 내용 */
            content: Record<string, never> | null;
            /** @description 알람 읽음 여부 */
            isRead: boolean;
            /**
             * Format: date-time
             * @description 생성일
             */
            createdAt: string;
            /** @description 알람 관련 사용자 */
            user: {
                /** @description 사용자 ID */
                id?: string;
                /** @description 사용자 이름 */
                name?: string;
            };
            /** @description 게시글 ID */
            postId: Record<string, never> | null;
            /** @description 댓글 ID */
            commentId: Record<string, never> | null;
            /** @description 팔로워 정보 */
            follower: {
                /** @description 팔로워 ID */
                id?: string;
                /** @description 팔로워 이름 */
                name?: string;
            } | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    PostController_findPosts: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindPostsResponseDto"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostContentDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePostResponseDto"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_findPostById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 게시글 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindPostByIdResponseDto"];
                };
            };
            /** @description 게시글을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_updatePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 수정할 게시글 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostContentDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePostResponseDto"];
                };
            };
            /** @description 게시글을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_deletePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 게시글 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeletePostResponseDto"];
                };
            };
            /** @description 게시글을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_toggleLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 좋아요할 게시글 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToggleLikeResponseDto"];
                };
            };
            /** @description 게시글을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_getUserPosts: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserPostsResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrivateController_getUserIsPrivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPrivateResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrivateController_updateUserPrivacy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePrivateBodyDto"];
            };
        };
        responses: {
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BlockController_blockUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 차단할 사용자 ID */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockUserDto"];
            };
        };
        responses: {
            /** @description 이미 차단된 사용자 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BlockController_unblockUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 차단 해제할 사용자 ID */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnBlockUserDto"];
            };
        };
        responses: {
            /** @description 차단되지 않은 사용자 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_getMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyInfoResponseDto"];
                };
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserByIdResponseDto"];
                };
            };
            /** @description 비공개 사용자 조회는 인증이 요구됨 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 비공개 사용자의 경우, 팔로우한 사용자만 조회 가능 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteUserResponseDto"];
                };
            };
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description 인증되지 않은 사용자 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_updateComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCommentDto"];
            };
        };
        responses: {
            /** @description 잘못된 요청 형식입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 존재하지 않는 댓글입니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_createComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCommentResponseDto"];
                };
            };
            /** @description 잘못된 요청 형식입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 존재하지 않는 게시물입니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_getCommentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 조회할 댓글의 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommentResponseDto"];
                };
            };
            /** @description 존재하지 않는 댓글입니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 삭제할 댓글의 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCommentResponseDto"];
                };
            };
            /** @description 존재하지 않는 댓글입니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_getCommentReplies: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 조회할 댓글의 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetRepliesResponseDto"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_toggleCommentLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 좋아요/싫어요를 토글할 댓글의 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToggleCommentLikeResponseDto"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_createCommentReply: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 답글 생성 요청 데이터 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReplyDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReplyResponseDto"];
                };
            };
            /** @description 잘못된 요청 형식입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 존재하지 않는 댓글이나 게시물입니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_getCommentsByPostId: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 댓글을 조회할 게시글의 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommentsByPostIdResponseDto"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CommentController_getCommentsByUserId: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 댓글을 조회할 사용자의 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommentsByUserIdResponseDto"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_toggleFollowUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 팔로우할 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToggleFollowResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_sendFollowRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 팔로우 요청할 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_rejectFollowRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 팔로우 요청을 거절할 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_getUserFollowingCount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFollowingCountResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_getUserFollowersCount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFollowersCountResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_getUserFollowers: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFollowersResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FollowController_getUserFollowing: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFollowingResponseDto"];
                };
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 회원가입 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponseDto"];
                };
            };
            /** @description 이미 사용 중인 이메일입니다 */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 로그인 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
            /** @description 잘못된 비밀번호입니다 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 잘못된 이메일입니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 토큰이 유효하지 않습니다 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 토큰이 존재하지 않습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 토큰이 유효하지 않습니다 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 토큰이 존재하지 않습니다 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    NotifyController_readAllNotifiesByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotifyController_getNotifiesByUserId: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (기본값: 1) */
                page?: number;
                /** @description 페이지당 수 (기본값: 10) */
                size?: number;
            };
            header?: never;
            path: {
                /** @description 사용자 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetNotifiesByUserIdResponseDto"];
                };
            };
            /** @description 다른 사용자의 알람을 조회할 수 없음 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 사용자를 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotifyController_getNotifyById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 알람 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetNotifyByIdResponseDto"];
                };
            };
            /** @description 알람을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotifyController_readNotifyById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 알람 ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 알람을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 서버 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotifySseController_stream: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
