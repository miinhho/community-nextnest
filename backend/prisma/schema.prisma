generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  isPrivate     Boolean   @default(false)

  posts        Post[]
  comments     Comment[]
  postLikes    PostLikes[]
  commentLikes CommentLikes[]
  refreshToken RefreshToken[]

  following Follow[] @relation("FollowingRelation")
  followers Follow[] @relation("FollowerRelation")

  blocker Blocking[] @relation("BlockerRelation")
  blocked Blocking[] @relation("BlockedRelation")

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  notifications     Notification[]
  notificationsSent Notification[] @relation("NotificationFollower")

  @@map("users")
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  createdAt DateTime @default(now())

  follower  User @relation("FollowerRelation", fields: [followerId], references: [id])
  following User @relation("FollowingRelation", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Blocking {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  createdAt DateTime @default(now())

  blocker User @relation("BlockerRelation", fields: [blockerId], references: [id])
  blocked User @relation("BlockedRelation", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@map("blockings")
}

model Post {
  id           String      @id @default(uuid())
  content      String
  authorId     String
  commentCount Int         @default(0)
  likeCount    Int         @default(0)
  likes        PostLikes[]
  comments     Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@index([authorId])
  @@index([createdAt])
  @@index([commentCount, createdAt])
  @@map("posts")
}

model Comment {
  id       String @id @default(uuid())
  content  String
  postId   String
  authorId String

  parentId   String?
  likesCount Int            @default(0)
  likes      CommentLikes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post         Post           @relation(fields: [postId], references: [id])
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent       Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[]      @relation("CommentReplies")
  notification Notification[]

  @@index([postId, createdAt])
  @@index([postId, parentId, createdAt])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

model PostLikes {
  id     String @id @default(uuid())
  userId String
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "userId_postId")
  @@index([userId])
  @@index([postId])
  @@map("post_likes")
}

model CommentLikes {
  id        String @id @default(uuid())
  userId    String
  commentId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId], name: "userId_commentId")
  @@index([userId])
  @@index([commentId])
  @@map("comment_likes")
}

enum Role {
  ADMIN
  USER
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model Notification {
  id      String           @id @default(uuid())
  userId  String
  type    NotificationType
  image   String?
  title   String
  content String?
  isRead  Boolean          @default(false)

  postId     String?
  commentId  String?
  followerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  follower User?    @relation("NotificationFollower", fields: [followerId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  COMMENT_LIKE
  COMMENT_REPLY
  FOLLOW
  MESSAGE
  SYSTEM
}
