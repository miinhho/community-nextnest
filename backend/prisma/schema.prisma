// ============================================
// GENERATOR & DATASOURCE
// ============================================
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  isPrivate     Boolean   @default(false)

  posts        Post[]
  postView     PostView[]
  postLikes    PostLikes[]
  comments     Comment[]
  commentView  CommentView[]
  commentLikes CommentLikes[]

  following            Follow[]        @relation("following")
  followers            Follow[]        @relation("follower")
  followRequestReceive FollowRequest[] @relation("follow_request_receiver")
  followRequestSent    FollowRequest[] @relation("follow_request_sender")

  blocker Blocking[] @relation("blocker")
  blocked Blocking[] @relation("blocked")

  notifications     Notification[]
  notificationsSent Notification[] @relation("notification_follower")

  refreshToken RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  createdAt DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model FollowRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  message    String?
  status     FollowRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  sender   User @relation("follow_request_sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("follow_request_receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@map("follow_requests")
}

model Notification {
  id      String           @id @default(uuid())
  userId  String
  type    NotificationType
  image   String?
  title   String
  content String?
  isRead  Boolean          @default(false)

  postId     String?
  commentId  String?
  followerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  follower User?    @relation("notification_follower", fields: [followerId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

model Blocking {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  createdAt DateTime @default(now())

  blocker User @relation("blocker", fields: [blockerId], references: [id])
  blocked User @relation("blocked", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@map("blockings")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

// ============================================
// CONTENT MANAGEMENT
// ============================================
model Post {
  id           String      @id @default(uuid())
  content      String
  authorId     String
  commentCount Int         @default(0)
  postView     PostView[]
  viewCount    Int         @default(0)
  likeCount    Int         @default(0)
  likes        PostLikes[]
  comments     Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@index([authorId])
  @@index([createdAt])
  @@index([commentCount, createdAt])
  @@map("posts")
}

model Comment {
  id       String @id @default(uuid())
  content  String
  postId   String
  authorId String

  parentId    String?
  viewCount   Int            @default(0)
  commentView CommentView[]
  likesCount  Int            @default(0)
  likes       CommentLikes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post         Post           @relation(fields: [postId], references: [id])
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent       Comment?       @relation("comment_reply", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[]      @relation("comment_reply")
  notification Notification[]

  @@index([postId, createdAt])
  @@index([postId, parentId, createdAt])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

// ============================================
// ENGAGEMENT & ANALYTICS
// ============================================
model PostView {
  id        String  @id @default(uuid())
  postId    String
  userId    String?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "post_user_view")
  @@unique([postId, ipAddress, userAgent], name: "post_ip_view")
  @@index([postId])
  @@index([userId])
  @@index([ipAddress])
  @@map("post_views")
}

model PostLikes {
  id     String @id @default(uuid())
  userId String
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "userId_postId")
  @@index([userId])
  @@index([postId])
  @@map("post_likes")
}

model CommentView {
  id        String  @id @default(uuid())
  commentId String
  userId    String?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId], name: "comment_user_view")
  @@unique([commentId, ipAddress, userAgent], name: "comment_ip_view")
  @@index([commentId])
  @@index([userId])
  @@index([ipAddress])
  @@map("comment_views")
}

model CommentLikes {
  id        String @id @default(uuid())
  userId    String
  commentId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId], name: "userId_commentId")
  @@index([userId])
  @@index([commentId])
  @@map("comment_likes")
}

// ============================================
// ENUMS
// ============================================
enum Role {
  ADMIN
  USER
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  COMMENT_LIKE
  COMMENT_REPLY
  FOLLOW
  MESSAGE
  SYSTEM
  MARK_AS_READ
  MARK_ALL_AS_READ
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
